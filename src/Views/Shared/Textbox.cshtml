@model form_builder.Models.Elements.Element
@{
    var hintId = $"{Model.Properties.QuestionId}-hint";
    var errorId = $"{Model.Properties.QuestionId}-error";

    var max = Model.Properties.Max ?? string.Empty;
    var min = Model.Properties.Min ?? string.Empty;
    var id = Model.Properties.QuestionId;
}

<div class="govuk-form-group">
    @if(Model.Properties.LabelAsH1) {
        <h1 class="govuk-fieldset__heading">
            <label @Model.WriteOptional() for="@Model.Properties.QuestionId">@Model.Properties.Label</label>
        </h1>
    } else {
        <label class="govuk-label" @Model.WriteOptional() for="@Model.Properties.QuestionId">@Model.Properties.Label
        @if (Model.Properties.Optional)
        {
            <span>(optional)</span>
        }    
        </label>
    }

    @if (!string.IsNullOrEmpty(Model.Properties.Hint.Trim()))
    {
        <span class="govuk-hint" id=@hintId>@Model.Properties.Hint</span>
    }
    @if (Model.Properties.Numeric)
    {
        <input type="number" id="@id" name="@id" max="@max" min="@min" value="@Model.Properties.Value" maxlength="@Model.Properties.MaxLength.ToString()" class="govuk-input" />
    }
    else
    {
        @* TODO: This feels like a hack, but I didn't want to add this in the .cs file *@
        var elements = Model.GenerateElementProperties();
        elements.Add("class", "govuk-input");
        
        @Html.TextBox(id, Model.Properties.Value, elements)
    }
    @if (!Model.IsValid)
    {
        <p class="input-error-content" id="@errorId">@Model.ValidationMessage</p>
    }
</div>
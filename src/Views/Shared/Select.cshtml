@using form_builder.Helpers
@model form_builder.Models.Element
@{
    var hintId = $"{Model.Properties.QuestionId}-hint";
    var errorId = $"{Model.Properties.QuestionId}-error";
}
    <div>
        @*@await Html.BeginFieldSet(Model)*@
        <legend class="sr-only">@Model.Properties.Label</legend>
        <label @Model.WriteOptional() for="@Model.Properties.QuestionId">@Model.Properties.Label</label>
        @if (Model.Properties?.Optional ?? true)
        {
        <p class="optional">(optional)</p>
        }

        @if (!string.IsNullOrEmpty(Model.Properties.Hint))
        {
        <p id=@hintId>@Html.Raw(Model.Properties.Hint)</p>
        }
        <select id="@Model.Properties.QuestionId" name="@Model.Properties.QuestionId">
            <partial name="SelectOptions" />
        </select>
        @if (!Model.IsValid)
        {
            {
                var validationMessage = string.IsNullOrEmpty(Model.Properties.CustomValidationMessage) ? Model.ValidationMessage : Model.Properties.CustomValidationMessage;
        <p class="input-error-content" id="@errorId">@validationMessage</p>
            }
        }

        @*@await Html.EndFieldSet()*@
    </div>

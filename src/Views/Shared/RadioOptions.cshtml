@using form_builder.Helpers
@model form_builder.Models.Elements.Element

@using form_builder.Enum;
@{
	var elements = Model.GenerateElementProperties();

	var baseCssClasses = "govuk-input";

	switch (Model.Properties.Width)
	{
		case ESize.Small:
			baseCssClasses += " govuk-input--width-3";
			break;

		case ESize.Medium:
			baseCssClasses += " govuk-input--width-5";
			break;

		case ESize.Large:
			baseCssClasses += " govuk-input--width-10";
			break;

		case ESize.ExtraLarge:
			baseCssClasses += " govuk-input--width-20";
			break;
	}

	elements.Add("class", !Model.IsValid
		? $"{baseCssClasses} govuk-input--error"
		: baseCssClasses);
}

<div class="govuk-radios govuk-radios--conditional" data-module="govuk-radios">
	@for (var i = 0; i < Model.Properties.Options.Count; i++)
	{
		var strongLabel = Model.Properties.Options[i].HasHint ? "govuk-label--s" : null;

		@if (Model.Properties.Options[i].HasDivider)
		{
			<div class="govuk-radios__divider">@Model.Properties.Options[i].Divider</div>
		}

		<div class="govuk-radios__item">
			<input class="govuk-radios__input"
				   type="radio"
				   value="@Model.Properties.Options[i].Value"
				   name="@Model.QuestionId"
				   id="@Model.GetListItemId(i)"
				   @(Model.Properties.Options[i].HasHint ? $"aria-describedby={Model.GetListItemHintId(i)}" : string.Empty)
				   @(Model.Properties.Checked || Model.Properties.Value.Contains(Model.Properties.Options[i].Value) ? "checked" : string.Empty)
				   data-aria-controls="conditional-@i" />

			<label class="govuk-label govuk-radios__label @strongLabel"
				   for="@Model.GetListItemId(i)">
				@Html.Raw(Model.Properties.Options[i].Text)
			</label>

			@if (Model.Properties.Options[i].HasHint)
			{
				<span class="govuk-hint govuk-radios__hint" id="@Model.GetListItemHintId(i)">@Html.Raw(Model.Properties.Options[i].Hint)</span>
			}

			@if (Model.Properties.Options[i].HasConditionalElement)
			{
				@if (@Model.Properties.Options[i].ConditionalElement.Type == EElementType.Textbox)
				{
					<div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-@i">
                        <div class="govuk-form-group @(!Model.Properties.Options[i].ConditionalElement.IsValid ? "govuk-form-group--error" : string.Empty)">

                            @if (!string.IsNullOrEmpty(Model.Properties.Options[i].ConditionalElement.Properties.Label)) {
                                <label class="govuk-label @(Model.Properties.Options[i].ConditionalElement.Properties.StrongLabel ? "govuk-label--m" : string.Empty)" for="@Model.Properties.Options[i].ConditionalElement.QuestionId">
                                    @Model.Properties.Options[i].ConditionalElement.Properties.Label
                                    @if (Model.Properties.Options[i].ConditionalElement.Properties.Optional && !Model.Properties.Options[i].ConditionalElement.Properties.HideOptionalText) {
                                        <span class="smbc-body">(optional)</span>
                                    }
                                </label>
                            }

                            @if (!string.IsNullOrEmpty(Model.Properties.Options[i].ConditionalElement.Properties.IAG)) {
                                <div class="govuk-inset-text">
                                    @Html.Raw(Model.Properties.Options[i].ConditionalElement.Properties.IAG)
                                </div>
                            }

                            @if (Model.Properties.Options[i].ConditionalElement.DisplayHint && !string.IsNullOrEmpty(Model.Properties.Options[i].ConditionalElement.Hint)) {
                                <span class="govuk-hint" id=@Model.Properties.Options[i].ConditionalElement.HintId>@Html.Raw(Model.Properties.Options[i].ConditionalElement.Hint)</span>
                            }

                            @if (!Model.Properties.Options[i].ConditionalElement.IsValid) {
                                var viewModel = new form_builder.ViewModels.ErrorViewModel {
                                    IsValid = Model.Properties.Options[i].ConditionalElement.IsValid,
                                    Message = Model.Properties.Options[i].ConditionalElement.ValidationMessage,
                                    Id = Model.Properties.Options[i].ConditionalElement.ErrorId
                                };

                                @if (!Model.Properties.Options[i].ConditionalElement.IsValid) {
                                    <span class="smbc-error-message">
                                        <span class="govuk-visually-hidden">Error:</span>
                                    </span>

                                    <partial model=viewModel name="ErrorBase" />
                                }
                            }

                            @{
                                var textboxElements = Model.Properties.Options[i].ConditionalElement.GenerateElementProperties();
                                textboxElements.Add("class", !Model.Properties.Options[i].ConditionalElement.IsValid
                                            ? $"{baseCssClasses} govuk-input--error"
                                            : baseCssClasses);
                            }

                            @Html.TextBox(Model.Properties.Options[i].ConditionalElement.QuestionId, Model.Properties.Options[i].ConditionalElement.Properties.Value, textboxElements)
                        </div>
					</div>
				}

				@if (@Model.Properties.Options[i].ConditionalElement.Type == EElementType.Textarea)
				{
					@if (@Model.Properties.Options[i].ConditionalElement.Properties.DisplayCharacterCount)
					{
						<div class="govuk-character-count govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-@i" data-module="govuk-character-count" data-maxlength="@Model.Properties.Options[i].ConditionalElement.Properties.MaxLength">
							<div class="govuk-form-group">

								<label class="govuk-label @(Model.Properties.Options[i].ConditionalElement.Properties.StrongLabel ? "govuk-label--m" : string.Empty)" for="@Model.Properties.Options[i].ConditionalElement.QuestionId">
									@Model.Properties.Options[i].ConditionalElement.Label
									@if (Model.Properties.Options[i].ConditionalElement.Properties.Optional && !Model.Properties.Options[i].ConditionalElement.Properties.HideOptionalText)
									{
										<span class="smbc-body">(optional)</span>
									}
								</label>

								@if (!Model.Properties.Options[i].ConditionalElement.IsValid)
								{
									var viewModel = new form_builder.ViewModels.ErrorViewModel
									{
										IsValid = Model.Properties.Options[i].ConditionalElement.IsValid,
										Message = Model.Properties.Options[i].ConditionalElement.ValidationMessage,
										Id = Model.Properties.Options[i].ConditionalElement.ErrorId
									};

									<partial model=viewModel name="ErrorBase" />
								}

								@{var textAreaElementProperties = Model.Properties.Options[i].ConditionalElement.GenerateElementProperties();
									textAreaElementProperties.Add("class", !Model.Properties.Options[i].ConditionalElement.IsValid
									? "govuk-textarea govuk-js-character-count govuk-textarea--error"
									: "govuk-textarea govuk-js-character-count");
								}

								@Html.TextArea(Model.Properties.Options[i].ConditionalElement.QuestionId, Model.Properties.Options[i].ConditionalElement.Properties.Value, textAreaElementProperties)
							</div>
							<span id=@Model.Properties.Options[i].ConditionalElement.GetCustomItemId("info") class="govuk-hint govuk-character-count__message" aria-live="polite">
								You can enter up to @Model.Properties.Options[i].ConditionalElement.Properties.MaxLength characters
							</span>
						</div>
					}
					else
					{
						<div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-@i" data-maxlength="@Model.Properties.Options[i].ConditionalElement.Properties.MaxLength">
							<div class="govuk-form-group">
								<label class="govuk-label @(Model.Properties.Options[i].ConditionalElement.Properties.StrongLabel ? "govuk-label--m" : string.Empty)" for="@Model.Properties.Options[i].ConditionalElement.QuestionId">
									@Model.Properties.Options[i].ConditionalElement.Label
								</label>

								@if (!Model.Properties.Options[i].ConditionalElement.IsValid)
								{
									var viewModel = new form_builder.ViewModels.ErrorViewModel
									{
										IsValid = Model.Properties.Options[i].ConditionalElement.IsValid,
										Message = Model.Properties.Options[i].ConditionalElement.ValidationMessage,
										Id = Model.Properties.Options[i].ConditionalElement.ErrorId
									};

									<partial model=viewModel name="ErrorBase" />
								}

								@{var textAreaElementProperties = Model.Properties.Options[i].ConditionalElement.GenerateElementProperties();
									textAreaElementProperties.Add("class", !Model.Properties.Options[i].ConditionalElement.IsValid
									? "govuk-textarea govuk-js-character-count govuk-textarea--error"
									: "govuk-textarea govuk-js-character-count");
								}

								@Html.TextArea(Model.Properties.Options[i].ConditionalElement.QuestionId, Model.Properties.Options[i].ConditionalElement.Properties.Value, textAreaElementProperties)

							</div>
						</div>
					}
				}

				@if (@Model.Properties.Options[i].ConditionalElement.Type == EElementType.DateInput)
				{
					<div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-@i">
						@{
							var maxYear = DateTime.Now.Year + 100;
							var inputClassesShort = "govuk-input govuk-date-input__input govuk-input--width-2";
							var inputClassesLong = "govuk-input govuk-date-input__input govuk-input--width-4";
							var labelClasses = "govuk-label";
							if (Model.Properties.Options[i].ConditionalElement.Properties.StrongLabel)
							{
								labelClasses += " govuk-label--s";
							}
							else
							{
								labelClasses += " govuk-date-input__label";
							}

							if (!Model.Properties.Options[i].ConditionalElement.IsValid)
							{
								inputClassesShort += " govuk-input--error";
								inputClassesLong += " govuk-input--error";
							}
						}
						<div class="govuk-form-group @(!Model.Properties.Options[i].ConditionalElement.IsValid ? "govuk-form-group--error" : string.Empty)">
							@Html.BeginFieldSet(Model.Properties.Options[i].ConditionalElement, new string[] { "govuk-fieldset" })

							<label class="govuk-label @(Model.Properties.Options[i].ConditionalElement.Properties.StrongLabel ? "govuk-label--m" : string.Empty)" for="@Model.Properties.Options[i].ConditionalElement.QuestionId">
								@Model.Properties.Options[i].ConditionalElement.Label
							</label>

							<partial name="InsetText" model="@Model.Properties.Options[i].ConditionalElement.Properties.IAG" />

							<partial name="Hint" />

							<partial model="Model.Properties.Options[i].ConditionalElement" name="Error" />

							<div class="govuk-date-input">
								<div class="govuk-date-input__item">
									<div class="govuk-form-group">
										<label class="@labelClasses" for=@Model.Properties.Options[i].ConditionalElement.GetCustomItemId("day")>
											Day
										</label>
										@Html.TextBox(Model.Properties.Options[i].ConditionalElement.GetCustomItemId("day"), Model.Properties.Day, new { autocomplete = "bday-day", maxlength = "2", type = "number", @class = inputClassesShort })
									</div>
								</div>

								<div class="govuk-date-input__item">
									<div class="govuk-form-group">
										<label class="@labelClasses" for=@Model.Properties.Options[i].ConditionalElement.GetCustomItemId("month")>
											Month
										</label>
										@Html.TextBox(Model.Properties.Options[i].ConditionalElement.GetCustomItemId("month"), Model.Properties.Options[i].ConditionalElement.Properties.Month, new { autocomplete = "bday-month", maxlength = "2", type = "number", @class = inputClassesShort })
									</div>
								</div>

								<div class="govuk-date-input__item">
									<div class="govuk-form-group">
										<label class="@labelClasses" for=@Model.Properties.Options[i].ConditionalElement.GetCustomItemId("year")>
											Year
										</label>
										@Html.TextBox(Model.Properties.Options[i].ConditionalElement.GetCustomItemId("year"), Model.Properties.Options[i].ConditionalElement.Properties.Year, new { autocomplete = "bday-year", maxlength = "4", type = "number", @class = inputClassesLong, max = maxYear })
									</div>
								</div>
							</div>
							@Html.EndFieldSet()
						</div>
					</div>
				}

			}

		</div>
	}
</div>
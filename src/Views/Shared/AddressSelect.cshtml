@model Tuple<form_builder.ViewModels.ElementViewModel, List<SelectListItem>>
@{
    var questionId = $"{Model.Item1.Element.Properties.QuestionId}-address";
    var hintId = $"{questionId}-hint";
    var errorId = $"{questionId}-error";
}

@if(Model.Item1.Element.Properties.LegendAsH1) {
    <h1>@Model.Item1.Element.Properties.AddressLabel

    @if (Model.Item1.Element.Properties.Optional)
    {
        <span class="optional">(optional)</span>
    }
    </h1>
} else {
    <label class="h2">@Model.Item1.Element.Properties.AddressLabel
    @if (Model.Item1.Element.Properties.Optional)
    {
        <span class="optional">(optional)</span>
    }
    </label>
}

<div class="user-search-term">
    <p><strong>Postcode: </strong>@Model.Item1.Element.Properties.Value </p>
    <a class="back-button" href="@Model.Item1.ReturnURL">Change</a>
</div>

@if (!string.IsNullOrEmpty(Model.Item1.Element.Properties.SelectHint))
{
    <p id=@hintId>@Html.Raw(Model.Item1.Element.Properties.SelectHint)</p>
}

@if(!string.IsNullOrEmpty(Model.Item1.Element.Properties.SelectLabel)){
    <label for="@questionId" @Model.Item1.Element.WriteOptional()>@Model.Item1.Element.Properties.SelectLabel</label>
    @if (Model.Item1.Element.Properties.Optional)
    {
        <span class="optional">(optional)</span>
    }
}

@Html.DropDownList(@questionId, @Model.Item2, @Model.Item1.Element.GenerateElementProperties("Select"))

@if (!Model.Item1.Element.IsValid)
{
    {
        var validationMessage = string.IsNullOrEmpty(Model.Item1.Element.Properties.SelectCustomValidationMessage) ? Model.Item1.Element.ValidationMessage : Model.Item1.Element.Properties.SelectCustomValidationMessage;
        <p class="input-error-content" id="@errorId">@validationMessage</p>
    }
}
<p><a href="@Model.Item1.ManualAddressURL">@Model.Item1.Element.Properties.AddressManualLinkText</a></p>

@model form_builder.Models.Element
@{
    var hintId = $"{Model.Properties.QuestionId}-hint";
    var errorId = $"{Model.Properties.QuestionId}-error";
    var line1id = $"{Model.Properties.QuestionId}-AddressManualAddressLine1";
    var line2id = $"{Model.Properties.QuestionId}-AddressManualAddressLine2";
    var line3id = $"{Model.Properties.QuestionId}-AddressManualAddressTown";
    var line4id = $"{Model.Properties.QuestionId}-AddressManualAddressPostcode";
}

    <fieldset>
        <div>@Html.Raw(Model.Properties.AddressManualHint)</div>

        @if (!string.IsNullOrEmpty(Model.Properties.Hint.Trim()))
        {
            <p class="description" id=@hintId>@Model.Properties.Hint</p>
        }

        <label for="@line1id">Address line 1</label>
        @Html.TextBox(line1id, Model.Properties.AddressManualAddressLine1, Model.GenerateElementProperties())
        <label class="optional" for="@line2id">Address line 2</label>
        <p class="optional">(optional)</p>
        @Html.TextBox(line2id, Model.Properties.AddressManualAddressLine2, Model.GenerateElementProperties())
        <label for="@line3id">Town</label>
        @Html.TextBox(line3id, Model.Properties.AddressManualAddressTown, Model.GenerateElementProperties())
        <label for="@line4id">Postcode</label>
        @Html.TextBox(line4id, Model.Properties.AddressManualAddressPostcode, Model.GenerateElementProperties())
        <p><a href="address">Search by postcode</a></p>
        @if (!Model.IsValid)
        {
            var validationMessage = string.IsNullOrEmpty(Model.Properties.CustomValidationMessage) ? Model.ValidationMessage : Model.Properties.CustomValidationMessage;
            <p class="input-error-content" id="@errorId">@validationMessage</p>
        }
    </fieldset>
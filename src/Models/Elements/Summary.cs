using form_builder.Enum;
using form_builder.Extensions;
using form_builder.Helpers.ElementHelpers;
using form_builder.Helpers.ViewRender;
using form_builder.Models.Properties.ElementProperties;
using form_builder.ViewModels;

namespace form_builder.Models.Elements
{
    public class Summary : Element
    {
        public Summary() => Type = EElementType.Summary;

        public override async Task<string> RenderAsync(IViewRender viewRender,
            IElementHelper elementHelper,
            string guid,
            Dictionary<string, dynamic> viewModel,
            Page page,
            FormSchema formSchema,
            IWebHostEnvironment environment,
            FormAnswers formAnswers,
            List<object> results = null)
        {
            List<PageSummary> pages = await elementHelper.GenerateQuestionAndAnswersList(guid, formSchema);
            var summaryViewModel = new SummarySectionsViewModel();

            if (formSchema.Pages.Any(_ => _.Elements.Any(_ => _.Type.Equals(EElementType.AddAnother))) && !Properties.HasSummarySectionsDefined)
            {
                summaryViewModel = AutoGenerateSummarySectionsViewModel(formSchema, formAnswers, pages, elementHelper);

                return await viewRender.RenderAsync(Type.ToString(), summaryViewModel);
            }

            if (Properties.HasSummarySectionsDefined && !Properties.SummarySectionsAutoGenerated)
            {
                summaryViewModel = GenerateDefinedSummarySectionViewModel(formSchema, formAnswers, pages, elementHelper);

                return await viewRender.RenderAsync(Type.ToString(), summaryViewModel);
            }

            summaryViewModel = new SummarySectionsViewModel
            {
                AllowEditing = Properties.AllowEditing,
                Sections = new List<SummarySection>
                    {
                        new SummarySection {
                            Pages = pages
                    }
                }
            };

            return await viewRender.RenderAsync(Type.ToString(), summaryViewModel);
        }

        private SummarySectionsViewModel AutoGenerateSummarySectionsViewModel(FormSchema formSchema, FormAnswers formAnswers, IEnumerable<PageSummary> pages, IElementHelper elementHelper)
        {
            var journeyPages = formSchema.GetReducedPages(formAnswers);

            List<IElement> addAnotherElements = journeyPages
                .Where(_ => _.Elements.Any(_ => _.Type.Equals(EElementType.AddAnother)))
                .SelectMany(_ => _.Elements.Where(_ => _.Type.Equals(EElementType.AddAnother))).ToList();

            Properties.SummarySectionsAutoGenerated = true;
            Properties.Sections = new List<Section>();
            var groupedPageSlugs = new List<List<string>>();
            var temporarySlugGroup = new List<string>();
            foreach (var schemaPage in journeyPages)
            {
                if (schemaPage.Elements.Any(_ => _.Type.Equals(EElementType.AddAnother)))
                {
                    var addElements = schemaPage.Elements.Where(_ => _.Type.Equals(EElementType.AddAnother));
                    var hasAnswers = false;

                    foreach (var element in addElements)
                    {
                        if (elementHelper.GetAddAnotherNumberOfFieldsets(element, formAnswers) > 0)
                        {
                            hasAnswers = true;
                            break;
                        }
                    }

                    if (hasAnswers)
                    {
                        temporarySlugGroup.Add(schemaPage.PageSlug);
                        groupedPageSlugs.Add(temporarySlugGroup);
                        temporarySlugGroup = new List<string>();
                        groupedPageSlugs.Add(new List<string> { $"{schemaPage.PageSlug}-{schemaPage.Elements.FirstOrDefault(_ => _.Type.Equals(EElementType.AddAnother)).Properties.QuestionId}" });
                    }
                }
                else
                {
                    temporarySlugGroup.Add(schemaPage.PageSlug);
                }
            }

            groupedPageSlugs.Add(temporarySlugGroup);

            foreach (var pageSlugGroup in groupedPageSlugs)
            {
                Properties.Sections.Add(new Section
                {
                    Pages = pageSlugGroup
                });
            }

            foreach (var element in addAnotherElements)
            {
                int numberOfFieldsets = elementHelper.GetAddAnotherNumberOfFieldsets(element, formAnswers);
                Page page = formSchema.Pages.First(_ => _.Elements.Contains(element));
                Section addAnotherElementSection = Properties.Sections.FirstOrDefault(_ => _.Pages.Any(_ => _.Contains($"{page.PageSlug}-{element.Properties.QuestionId}")));

                int indexOfAddAnotherElementSection = Properties.Sections.IndexOf(addAnotherElementSection);

                for (var i = 1; i <= numberOfFieldsets; i++)
                {
                    Properties.Sections.Insert(indexOfAddAnotherElementSection + i, new Section
                    {
                        Pages = new List<string>
                            {
                                $"{page.PageSlug}-{element.Properties.QuestionId}-{i}"
                            },
                        Title = element.GetLabelText(page.Title)
                    });
                }

                Properties.Sections.Remove(addAnotherElementSection);
            }

            return new SummarySectionsViewModel
            {
                Sections = Properties.Sections.Select(_ => new SummarySection
                {
                    Title = _.Title,
                    Pages = _.Pages.SelectMany(x => pages.Where(y => y.PageSummaryId.Equals(x) && y.Answers.Count > 0)).ToList()
                }).ToList(),
                AllowEditing = Properties.AllowEditing
            };
        }

        private SummarySectionsViewModel GenerateDefinedSummarySectionViewModel(FormSchema formSchema, FormAnswers formAnswers, IEnumerable<PageSummary> pages, IElementHelper elementHelper)
        {
            if (formSchema.Pages.Any(_ => _.Elements.Any(_ => _.Type.Equals(EElementType.AddAnother))))
            {
                List<Section> newSections = new();

                foreach (Section section in Properties.Sections)
                {
                    foreach (string sectionPage in section.Pages)
                    {
                        newSections.Add(section);

                        Page schemaPageForSection = formSchema.Pages.FirstOrDefault(_ => _.PageSlug.Equals(sectionPage));
                        if (schemaPageForSection is not null && schemaPageForSection.Elements.Any(_ => _.Type.Equals(EElementType.AddAnother)))
                        {
                            IElement addAnotherElement = schemaPageForSection.Elements.FirstOrDefault(_ => _.Type.Equals(EElementType.AddAnother));
                            int currentIncrement = elementHelper.GetAddAnotherNumberOfFieldsets(addAnotherElement, formAnswers);

                            for (var i = 1; i <= currentIncrement; i++)
                            {
                                newSections.Add(new Section
                                {
                                    Pages = new List<string>
                                        {
                                            $"{schemaPageForSection.PageSlug}-{addAnotherElement.Properties.QuestionId}-{i}"
                                        },
                                    Title = addAnotherElement.GetLabelText(schemaPageForSection.Title)
                                });
                            }
                        }
                    }
                }

                Properties.Sections = newSections;
            }

            return new SummarySectionsViewModel
            {
                Sections = Properties.Sections.Select(_ => new SummarySection
                {
                    Title = _.Title,
                    Pages = _.Pages.SelectMany(x => pages.Where(y => y.PageSummaryId.Equals(x) && y.Answers.Count > 0)).ToList()
                }).ToList(),
                AllowEditing = Properties.AllowEditing
            };
        }
    }
}